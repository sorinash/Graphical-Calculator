from tkinter import *


class calc(): 
    #starts off with an initial value of 0 and blank sign/second values
    
    def __init__(self): 
        self.firstnum = '0'
        self.sign = ''
        self.snum = ''
        self.totalstr = self.firstnum + self.sign + self.snum
        self.imon = 0 #checks to see which number is being edited
        self.am_i_start = True # checks to see if we've started editing
        self.decimal_okay = True # checks to see if a decimal is kosher to use
        self.errorthrown = False # in case of a divide by zero error, this is true
    def remake(self):
        self.totalstr = self.firstnum + self.sign + self.snum # creates a string to display
    def updatenumber(self, numberst): 
        if self.errorthrown: 
            return #will not update if in error
        if self.imon == 0 and self.am_i_start and self.decimal_okay:
            self.firstnum = numberst # if we're starting off, replaces the intial zero
            self.am_i_start = False
        elif self.imon == 0: 
            self.firstnum += numberst # if we're editing the number, adds onto the last digit
        else: 
            self.snum += numberst # if on the second number, adds onto the last digit of the second number
        self.remake() # reassembles the string
    def includesign(self,signstr):
        if self.errorthrown:
            return 
        self.sign = signstr #determines a sign
        self.imon = 1 #moves to the second number
        self.decimal_okay = True #reestablishes that it's good to make a decimal
        self.remake()
    def clearall(self):
        self.firstnum = '0' #resets everything to initial value
        self.sign = '' 
        self.snum = ''
        self.imon = 0
        self.am_i_start=True
        self.remake()
        self.decimal_okay = True
        self. errorthrown = False
    def make_a_decimal(self): 
        if self.decimal_okay == False or self.errorthrown: 
            return # will not work if a decimal is present in the number
        if self.imon == 0: 
            self.firstnum += '.' 
            self.am_i_start = False 
        elif self.imon != 0 and self.snum == '':
            self.snum = '0.' # automatically adds 0 prior to a decimal point
        else: 
            self.snum += '.'
        self.decimal_okay = False
        self.remake()
    def do_calculation(self):
        if self.imon == 0: # if still on the first number,return first number
            myanswer = self.firstnum
            self.remake()
            self.firstnum = str(myanswer)
            return
        fnum = float(self.firstnum) # convert to float
        
        nnum = 0 # by default second number is zero, but otherwise equals snum
        if self.snum != '': 
            nnum = self.snum
            
        # adds, subtracts, divides, etc based on sign. 
        # if dividing by zero, throw an error. 
        if self.sign == "+":
            myanswer = fnum + nnum
        elif self.sign == '-':
            myanswer = fnum - nnum
        elif self.sign == '*':
            myanswer = fnum * nnum
        elif self.sign == '/' and nnum == 0: 
            myanswer = 'ERROR: Cannot divide by zero'
            self.errorthrown = True
            self.totalstr = myanswer
            return
        else: 
            myanswer = fnum / nnum
            
        # clear everything aside from first number, remake string
        self.clearall()
        self.imon=0
        self.firstnum = str(myanswer)
        self.remake()
            
            
    
mycalc = calc() # create a calculator object
root = Tk() # create Tk object
root.geometry("200x150")
frame = Frame(root)
frame.pack() #make frame

leftframe = Frame(root)
leftframe.pack(side=LEFT)

#creates a label
label = Label(frame, text = mycalc.totalstr)
label.pack()


# creates functions for each button
# by and large self-explanatory, but after running the function from the 
# Calc class, updates the label to display the redone number
def upone(): 
    mycalc.updatenumber("1")
    label.configure(text = mycalc.totalstr)
def uptwo(): 
    mycalc.updatenumber('2')
    label.configure(text = mycalc.totalstr)
def upthree(): 
    mycalc.updatenumber('3')
    label.configure(text = mycalc.totalstr)
def upfour(): 
    mycalc.updatenumber('4')
    label.configure(text = mycalc.totalstr)
def upfive(): 
    mycalc.updatenumber('5')
    label.configure(text = mycalc.totalstr)
def upsix(): 
    mycalc.updatenumber('6')
    label.configure(text = mycalc.totalstr)
def upseven(): 
    mycalc.updatenumber('7')
    label.configure(text = mycalc.totalstr)
def upeight():
    mycalc.updatenumber('8')
    label.configure(text = mycalc.totalstr)
def upnine():
    mycalc.updatenumber('9')
    label.configure(text = mycalc.totalstr)
def upzero():
    mycalc.updatenumber('0')
    label.configure(text = mycalc.totalstr)
def upplus():
    mycalc.includesign('+')
    label.configure(text = mycalc.totalstr)
def upmin():
    mycalc.includesign('-')
    label.configure(text = mycalc.totalstr)
def uptim():
    mycalc.includesign('*')
    label.configure(text = mycalc.totalstr)
def updiv(): 
    mycalc.includesign('/')
    label.configure(text = mycalc.totalstr)
def clearall(): 
    mycalc.clearall()
    label.configure(text = mycalc.totalstr)
def decimalmake():
    mycalc.make_a_decimal()
    label.configure(text = mycalc.totalstr)
def docalc():
    mycalc.do_calculation()
    label.configure(text = mycalc.totalstr)

# number buttons
button1= Button(leftframe,text = "1", command = upone)
button1.grid(row=0, column = 0)
button2 = Button(leftframe, text = "2", command = uptwo)
button2.grid(row=0, column = 1)
button3 = Button(leftframe, text = "3",  command = upthree)
button3.grid(row=0, column = 2)
button4 = Button(leftframe, text = "4", command = upfour)
button4.grid(row=1,column=0)
button5 = Button(leftframe, text = "5", command = upfive)
button5.grid(row=1, column = 1)
button6 = Button(leftframe, text = "6", command = upsix)
button6.grid(row=1, column = 2)
button7 = Button(leftframe, text = "7", command = upseven)
button7.grid(row=2, column = 0)
button8 = Button(leftframe, text = "8", command = upeight)
button8.grid(row=2, column = 1)
button9 = Button(leftframe, text = "9", command = upnine)
button9.grid(row=2, column = 2)
button0= Button(leftframe,text = "0", command = upzero)
button0.grid(row=3,column=1)

#decimal button
buttondot = Button(leftframe, text = '.', command = decimalmake)
buttondot.grid(row=3, column=0)

buttoneq = Button(leftframe, text = '=', command = docalc)
buttoneq.grid(row=3, column = 5)

buttonclear = Button(leftframe, text = 'CE', command = clearall)
buttonclear.grid(row=3, column = 6)

buttonplus = Button(leftframe, text = "+", command = upplus)
buttonplus.grid(row=0, column = 5)
buttonminus = Button(leftframe, text = "-", command = upmin)
buttonminus.grid(row=0, column = 6)
buttontimes = Button(leftframe, text = "*", command = uptim)
buttontimes.grid(row=1, column = 5)
buttondiv = Button(leftframe, text = "/", command = updiv)
buttondiv.grid(row=1, column = 6)

label.pack(padx=5,pady=5)

root.title("Test")
root.mainloop()
